// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: local_pose.proto

#ifndef PROTOBUF_local_5fpose_2eproto__INCLUDED
#define PROTOBUF_local_5fpose_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "local_vector3d.pb.h"
#include "local_quaternion.pb.h"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_local_5fpose_2eproto();
void protobuf_AssignDesc_local_5fpose_2eproto();
void protobuf_ShutdownFile_local_5fpose_2eproto();

class LocalPose;

// ===================================================================

class LocalPose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.LocalPose) */ {
 public:
  LocalPose();
  virtual ~LocalPose();

  LocalPose(const LocalPose& from);

  inline LocalPose& operator=(const LocalPose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalPose& default_instance();

  void Swap(LocalPose* other);

  // implements Message ----------------------------------------------

  inline LocalPose* New() const { return New(NULL); }

  LocalPose* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LocalPose& from);
  void MergeFrom(const LocalPose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalPose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 id = 9;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 9;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // required .gazebo.msgs.LocalVector3d position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  const ::gazebo::msgs::LocalVector3d& position() const;
  ::gazebo::msgs::LocalVector3d* mutable_position();
  ::gazebo::msgs::LocalVector3d* release_position();
  void set_allocated_position(::gazebo::msgs::LocalVector3d* position);

  // required .gazebo.msgs.LocalQuaternion orientation = 4;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 4;
  const ::gazebo::msgs::LocalQuaternion& orientation() const;
  ::gazebo::msgs::LocalQuaternion* mutable_orientation();
  ::gazebo::msgs::LocalQuaternion* release_orientation();
  void set_allocated_orientation(::gazebo::msgs::LocalQuaternion* orientation);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.LocalPose)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_orientation();
  inline void clear_has_orientation();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::gazebo::msgs::LocalVector3d* position_;
  ::gazebo::msgs::LocalQuaternion* orientation_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_local_5fpose_2eproto();
  friend void protobuf_AssignDesc_local_5fpose_2eproto();
  friend void protobuf_ShutdownFile_local_5fpose_2eproto();

  void InitAsDefaultInstance();
  static LocalPose* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalPose

// optional string name = 1;
inline bool LocalPose::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocalPose::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocalPose::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocalPose::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& LocalPose::name() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LocalPose.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocalPose::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.LocalPose.name)
}
inline void LocalPose::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.LocalPose.name)
}
inline void LocalPose::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.LocalPose.name)
}
inline ::std::string* LocalPose::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.LocalPose.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocalPose::release_name() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.LocalPose.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocalPose::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.LocalPose.name)
}

// optional uint32 id = 9;
inline bool LocalPose::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocalPose::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LocalPose::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LocalPose::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 LocalPose::id() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LocalPose.id)
  return id_;
}
inline void LocalPose::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.LocalPose.id)
}

// required .gazebo.msgs.LocalVector3d position = 3;
inline bool LocalPose::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LocalPose::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LocalPose::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LocalPose::clear_position() {
  if (position_ != NULL) position_->::gazebo::msgs::LocalVector3d::Clear();
  clear_has_position();
}
inline const ::gazebo::msgs::LocalVector3d& LocalPose::position() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LocalPose.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::gazebo::msgs::LocalVector3d* LocalPose::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::gazebo::msgs::LocalVector3d;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.LocalPose.position)
  return position_;
}
inline ::gazebo::msgs::LocalVector3d* LocalPose::release_position() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.LocalPose.position)
  clear_has_position();
  ::gazebo::msgs::LocalVector3d* temp = position_;
  position_ = NULL;
  return temp;
}
inline void LocalPose::set_allocated_position(::gazebo::msgs::LocalVector3d* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.LocalPose.position)
}

// required .gazebo.msgs.LocalQuaternion orientation = 4;
inline bool LocalPose::has_orientation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LocalPose::set_has_orientation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LocalPose::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LocalPose::clear_orientation() {
  if (orientation_ != NULL) orientation_->::gazebo::msgs::LocalQuaternion::Clear();
  clear_has_orientation();
}
inline const ::gazebo::msgs::LocalQuaternion& LocalPose::orientation() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LocalPose.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::gazebo::msgs::LocalQuaternion* LocalPose::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::gazebo::msgs::LocalQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.LocalPose.orientation)
  return orientation_;
}
inline ::gazebo::msgs::LocalQuaternion* LocalPose::release_orientation() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.LocalPose.orientation)
  clear_has_orientation();
  ::gazebo::msgs::LocalQuaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void LocalPose::set_allocated_orientation(::gazebo::msgs::LocalQuaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.LocalPose.orientation)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_local_5fpose_2eproto__INCLUDED
